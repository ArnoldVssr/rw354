import java.net.*;
import java.io.*;

public class MyClient 
{
	private Socket socket = null;
	private ObjectInputStream inFromServer = null;
	private ObjectOutputStream outToServer = null;
	private boolean isConnected = false;
	public boolean notUnique = true;
	public User user = new User();
	public Message tm = new Message();
	public boolean readBusy = true;
	public static final class Lock { }
	public final Object lock = new Lock();

	public void communicate() 
	{
		String inputName = "";
		String choice = "";
		String body = "";
		String toUser = "";
		InetAddress address;
		int port = -1;

		while (!isConnected)
		{
			try 
			{
				socket = new Socket("localHost", 6066);
				isConnected = true;
				address = socket.getInetAddress();
				port = socket.getPort();
				user = new User(inputName, address,port);
				MyThread io = new MyThread(this,"io");
				io.start();
				outToServer = new ObjectOutputStream(socket.getOutputStream());
				inFromServer = new ObjectInputStream(socket.getInputStream());

				synchronized (lock) {
					while (readBusy)
					{
						lock.wait();	
					}
					outToServer.writeObject(0);
					outToServer.writeObject(user);
					notUnique = (Boolean) inFromServer.readObject();
					readBusy = true;
				}

				while(notUnique)
				{
					synchronized(lock)
					{
						while (readBusy)
						{
							lock.wait();
						}
						outToServer.writeObject(0);
						outToServer.writeObject(user);
						notUnique = (Boolean) inFromServer.readObject();
						readBusy = true;
					}
				}
				Message temp = new Message();
				while(!choice.equalsIgnoreCase("bye"))
				{
					temp = (Message) inFromServer.readObject();
					if (temp.getRecipient() != "")
					{
						System.out.println(temp.getRecipient() + ": " + temp.getMessage());
					}
					synchronized(lock)
					{
						while(readBusy)
						{
							lock.wait();
							
						}
						outToServer.writeObject(1);
						outToServer.writeObject(tm);
						readBusy = true;
					}
				}
				/*System.out.print("Username: ");
    			//inputName = reader.readLine();
    			//User user = new User(inputName, address,port);
                System.out.println("Waiting for io...");
        		synchronized (lock) {
        			lock.wait();
				}
        		System.out.println("Done waiting for io");
    			outToServer.writeObject(0);
    			outToServer.writeObject(user);
    			notUnique = (Boolean) inFromServer.readObject();
                while (notUnique)
                {
                	//String oldname = user.getName();
                	//outToServer.writeObject(0);
                    //outToServer.writeObject(user);

                		/*System.out.println("Name already taken");
                		System.out.print("Username: ");
            			inputName = reader.readLine();
            			user = new User(inputName, address,port);

            		synchronized (lock)
            		{
            			outToServer.writeObject(0);
            			outToServer.writeObject(user);
            			notUnique = (Boolean) inFromServer.readObject();
            			System.out.println("Got username, notifying system");
            			System.out.println("Notifying test is available...");
            			lock.notify();
            			System.out.println("test is available...");
            		}
        			synchronized (io) {
        				System.out.println("Waiting on io...");
						io.wait();
            			System.out.println("Done waiting on io...");
					}
                }

                while (!choice.toLowerCase().equals("bye"))
                {
                	synchronized (io) {
            			io.wait();
					}
                	outToServer.writeObject(1);
            		outToServer.writeObject(tm);
                	System.out.println("What you want?");
                	choice = reader.readLine();
                	if (choice.equalsIgnoreCase("whisper"))
                	{
                		System.out.print("User: ");
                		String whipsUser = reader.readLine();
                		System.out.println("Message: ");
                		String whispMessage = reader.readLine();
                		Message tm = new Message(whipsUser, whispMessage);
                		outToServer.writeObject(1);
                		outToServer.writeObject(tm);
                	}

                }*/
				outToServer.writeObject(9);
				inFromServer.close();
				outToServer.close();
				socket.close();
				System.out.println(user.getName() + " disconnected");
			}
			catch (SocketException socketError) 
			{
				System.err.println(socketError.getMessage());
			} 
			catch (IOException e)
			{
				System.err.println(e.getMessage());
			} 
			catch (ClassNotFoundException e) 
			{
				System.err.println(e.getMessage());
			} 
			catch (InterruptedException e)
			{
				e.printStackTrace();
			}
		}
	}

	public static void main(String[] args) 
	{
		MyClient client = new MyClient();
		client.communicate();
	}
}